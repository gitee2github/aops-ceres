#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
from typing import Dict

from flask import Response, jsonify

from ceres.function.schema import CVE_SCAN_SCHEMA, REPO_SET_SCHEMA
from ceres.function.status import PARAM_ERROR, StatusCode
from ceres.function.util import validate_data
from ceres.manages.collect_manage import Collect
from ceres.manages.token_manage import TokenManage
from ceres.manages.vulnerability_manage import VulnerabilityManage


@TokenManage.validate_token
def repo_set(data: Dict) -> Response:
    """
    Save the repo source to local

    Args:
        data(dict): e.g
            {
                "repo_info": {
                    "name": "string",
                    "dest": "save location",
                    "repo_content": "repo source info"
                },
                "check_items": ["string"],
                "check": false
            }

    Returns:
        Response: e.g
            {
                "code": "int",
                "msg": "string"
            }
    """
    if validate_data(data, REPO_SET_SCHEMA):
        return jsonify(StatusCode.make_response_body(VulnerabilityManage().repo_set(data)))
    return jsonify(StatusCode.make_response_body(PARAM_ERROR))


@TokenManage.validate_token
def vulnerability_cve_scan(scan_info: Dict) -> Response:
    """
    execute cve scan task

    Args:
        scan_info(dict): e.g
            {
                "basic": true,
                "check_items": ["string"],
                "check": false
            }

    Returns:
        Response: e.g
            {
                "code": 200,
                "msg": "operate succeed",
                "result": {
                    "os_version": "openEuler 22.03 LTS",
                    "installed_packages": ["pkg1", "pkg2"],
                    "cves": ["CVEID1", "CVEID2"]
                }
            }
    """
    if not validate_data(scan_info, CVE_SCAN_SCHEMA):
        return jsonify(StatusCode.make_response_body(PARAM_ERROR))

    status_code, cve_scan_info = VulnerabilityManage().cve_scan(scan_info)
    result = ({
        "result": {
            "cves": cve_scan_info,
            "os_version": Collect.get_system_info(),
            "installed_packages": Collect.get_installed_packages()
        }
    })
    return jsonify(StatusCode.make_response_body((status_code, result)))
