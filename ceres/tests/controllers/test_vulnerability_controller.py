#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import json
from unittest import mock

from ceres.function.status import PARAM_ERROR, SUCCESS, TOKEN_ERROR

from ceres.manages.token_manage import TokenManage
from ceres.manages.vulnerability_manage import VulnerabilityManage

from ceres.tests import BaseTestCase


class TestVulnerabilityController(BaseTestCase):
    header = {
        "Content-Type": "application/json; charset=UTF-8"
    }

    header_with_token = {
        "Content-Type": "application/json; charset=UTF-8",
        "access_token": "13965d8302b5246a13352680d7c8e602"
    }

    header_with_incorrect_token = {
        "Content-Type": "application/json; charset=UTF-8",
        "access_token": "13965d8302b5246a13352680d7c8e602Ss"
    }

    def setUp(self) -> None:
        TokenManage.set_value('13965d8302b5246a13352680d7c8e602')

    @mock.patch.object(VulnerabilityManage, "repo_set")
    def test_repo_set_should_return_success_when_all_is_right(self, mock_repo_set):
        mock_repo_set.return_value = SUCCESS
        mock_args = {
            "repo_info": {
                "name": "mock_name",
                "dest": "mock_dest",
                "repo_content": "mock_content"
            },
            "check_items": [],
            "check": False
        }
        response = self.client.post('v1/ceres/cve/repo/set',
                                    data=json.dumps(mock_args),
                                    headers=self.header_with_token)
        self.assertEqual(SUCCESS, response.json.get('code'))

    def test_repo_set_should_return_token_error_when_token_is_incorrect(self):
        mock_args = {
            "repo_info": {
                "name": "mock_name",
                "dest": "mock_dest",
                "repo_content": "mock_content"
            },
            "check_items": [],
            "check": False
        }
        response = self.client.post('v1/ceres/cve/repo/set',
                                    data=json.dumps(mock_args),
                                    headers=self.header_with_incorrect_token)
        self.assertEqual(TOKEN_ERROR, response.json.get('code'))

    def test_repo_set_should_return_param_error_when_input_args_is_null(self):
        response = self.client.post('v1/ceres/cve/repo/set',
                                    headers=self.header_with_token)
        self.assertEqual(PARAM_ERROR, response.json.get('code'))

    def test_repo_set_should_return_400_when_input_with_no_token(self):
        mock_args = {
            "repo_info": {
                "name": "mock_name",
                "dest": "mock_dest",
                "repo_content": "mock_content"
            },
            "check_items": [],
            "check": False
        }
        response = self.client.post('v1/ceres/cve/repo/set',
                                    data=json.dumps(mock_args),
                                    headers=self.header)
        self.assert400(response)

    @mock.patch.object(VulnerabilityManage, "repo_set")
    def test_repo_set_should_return_param_error_when_input_args_is_incorrect(self, mock_repo_set):
        mock_repo_set.return_value = SUCCESS
        mock_args = {
            "repo_info": {
                "name": "mock_name",
                "dest": "",
                "repo_content": "mock_content"
            },
            "check_items": [],
            "check": False
        }
        response = self.client.post('v1/ceres/cve/repo/set',
                                    data=json.dumps(mock_args),
                                    headers=self.header_with_token)
        self.assertEqual(PARAM_ERROR, response.json.get('code'))
