#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import os
import unittest
from unittest import mock

from ceres.conf.constant import CommandExitCode
from ceres.function.status import (
    PARAM_ERROR,
    REPO_CONTENT_INCORRECT,
    REPO_NOT_SET,
    SERVICE_NOT_EXIST,
    SUCCESS,
    COMMAND_EXEC_ERROR,
)
from ceres.manages.vulnerability_manage import VulnerabilityManage


class TestVulnerabilityManage(unittest.TestCase):
    @mock.patch.object(os, "remove")
    @mock.patch("builtins.open", mock.mock_open())
    @mock.patch.object(VulnerabilityManage, "_validate_repo_source")
    def test_repo_set_should_return_success_when_input_repo_content_can_be_used_by_yum(
        self, mock_validate_source, mock_remove
    ):
        mock_validate_source.return_value = True
        mock_remove.return_value = ''
        mock_args = {
            "repo_info": {
                "repo_name": "mock_name",
                "dest": "/etc/yum.repos.d/mock.repo",
                "repo_content": "mock_content",
            },
            "check_items": [],
            "check": False,
        }
        result = VulnerabilityManage().repo_set(mock_args)
        self.assertEqual(SUCCESS, result)

    @mock.patch.object(os, "remove")
    @mock.patch("builtins.open", mock.mock_open())
    @mock.patch.object(VulnerabilityManage, "_validate_repo_source")
    def test_repo_set_should_return_repo_content_is_incorrect_when_repo_content_cannot_be_used_by_yum(
        self, mock_validate_source, mock_remove
    ):
        mock_validate_source.return_value = False
        mock_remove.return_value = ''
        mock_args = {
            "repo_info": {
                "repo_name": "mock_name",
                "dest": "/etc/yum.repos.d/mock.repo",
                "repo_content": "mock_content",
                "check": False,
            },
            "check_items": [],
        }
        result = VulnerabilityManage().repo_set(mock_args)
        self.assertEqual(REPO_CONTENT_INCORRECT, result)

    def test_repo_set_should_return_param_error_when_repo_save_path_is_incorrect(self):
        mock_args = {
            "repo_info": {
                "repo_name": "mock_name",
                "dest": "mock_dest",
                "repo_content": "mock_content",
                "check": False,
            },
            "check_items": [],
        }
        result = VulnerabilityManage().repo_set(mock_args)
        self.assertEqual(PARAM_ERROR, result)

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_validate_repo_source_should_return_true_when_query_repo_info_succeed(self, mock_execute_shell_command):
        mock_execute_shell_command.return_value = CommandExitCode.SUCCEED, "", ""
        result = VulnerabilityManage._validate_repo_source('update')
        self.assertEqual(True, result)

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_validate_repo_source_should_return_false_when_shell_command_execute_failed(
        self, mock_execute_shell_command
    ):
        mock_execute_shell_command.return_value = CommandExitCode.FAIL, "", ""
        self.assertEqual(False, VulnerabilityManage._validate_repo_source('update'))

    @mock.patch.object(VulnerabilityManage, "_check_cve_by_dnf")
    @mock.patch.object(VulnerabilityManage, "_validate_repo_source")
    def test_cve_scan_should_return_cve_info_with_package_list_when_all_is_right(
        self, mock_validate_repo, mock_cve_scan
    ):
        mock_cve_scan_res = {"unfixed_cves": [], "fixed_cves": [{"cve_id": "CVE-2023-1111", "fixed_by_hp": False}]}
        mock_cve_scan.return_value = mock_cve_scan_res
        mock_validate_repo.return_value = True
        mock_args = {"basic": True, "check": True, "check_items": []}
        self.assertEqual(mock_cve_scan_res, VulnerabilityManage().cve_scan(mock_args))

    @mock.patch.object(VulnerabilityManage, "_validate_repo_source")
    def test_cve_scan_should_return_repo_not_set_when_repo_named_update_is_not_set(self, mock_validate_repo):
        mock_validate_repo.return_value = False

        mock_args = {"basic": True}
        self.assertEqual(REPO_NOT_SET, VulnerabilityManage().cve_scan(mock_args)[0])

    @mock.patch.object(VulnerabilityManage, "_validate_repo_source")
    def test_cve_scan_should_return_service_not_exist_when_input_basic_is_false(self, mock_validate_repo):
        mock_validate_repo.return_value = True
        mock_args = {"basic": False}
        self.assertEqual(SERVICE_NOT_EXIST, VulnerabilityManage().cve_scan(mock_args)[0])

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    @mock.patch.object(VulnerabilityManage, "_validate_repo_source")
    def test_cve_scan_should_return_command_exec_error_when_query_hotpatch_failed(
        self, mock_validate_repo, mock_execute_shell_command
    ):
        mock_validate_repo.return_value = True
        mock_execute_shell_command.side_effect = [
            (CommandExitCode.SUCCEED, "", ""),
            (CommandExitCode.FAIL, "", ""),
            (CommandExitCode.SUCCEED, "", ""),
        ]
        mock_args = {"basic": True}
        self.assertEqual(COMMAND_EXEC_ERROR, VulnerabilityManage().cve_scan(mock_args)[0])

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    @mock.patch.object(VulnerabilityManage, "_validate_repo_source")
    def test_cve_scan_should_return_command_exec_error_when_query_hotpatch_status_failed(
        self, mock_validate_repo, mock_execute_shell_command
    ):
        mock_validate_repo.return_value = True
        mock_execute_shell_command.side_effect = [
            (CommandExitCode.SUCCEED, "", ""),
            (CommandExitCode.SUCCEED, "", ""),
            (CommandExitCode.FAIL, "", ""),
        ]
        mock_args = {"basic": True}
        self.assertEqual(COMMAND_EXEC_ERROR, VulnerabilityManage().cve_scan(mock_args)[0])

    @mock.patch.object(VulnerabilityManage, '_validate_repo_source')
    @mock.patch.object(VulnerabilityManage, '_fix_cve_by_dnf')
    def test_cve_fix_should_return_fix_result_when_repo_is_set(self, mock_cve_fix, mock_repo_validate):
        mock_repo_validate.return_value = True
        mock_cve_fix.side_effect = [(True, 'fix succeed'), (False, 'command_error')]
        mock_cve = [{"cve_id": 'cve_id_1', "hotpatch": True}, {"cve_id": "cve_id_2", "hotpatch": False}]
        expected_result = [
            {"cve_id": "cve_id_1", "result": "succeed", "log": "fix succeed"},
            {"cve_id": "cve_id_2", "result": "fail", "log": "command_error"},
        ]
        self.assertEqual((SUCCESS, expected_result), VulnerabilityManage().cve_fix(mock_cve))

    @mock.patch.object(VulnerabilityManage, '_validate_repo_source')
    def test_cve_fix_should_return_repo_not_set_when_repo_is_not_set(self, mock_repo_validate):
        mock_repo_validate.return_value = False
        mock_cve = [{"cve_id": 'cve_id_1', "hotpatch": True}, {"cve_id": "cve_id_2", "hotpatch": False}]
        expected_result = [
            {"cve_id": "cve_id_1", "result": "fail", "log": "repo source named aops-update is not set"},
            {"cve_id": "cve_id_2", "result": "fail", "log": "repo source named aops-update is not set"},
        ]
        self.assertEqual((REPO_NOT_SET, expected_result), VulnerabilityManage().cve_fix(mock_cve))

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_check_cve_by_dnf_should_return_cve_scan_result_when_hotpatch_scan_is_supported(
        self, mock_execute_shell_command
    ):
        mock_hot_updateinfo_stdout = (
            "Last metadata expiration check: 1:16:26 ago on Thu 06 Jul 2023 04:53:58 PM CST.\n"
            "patch-redis-6.2.5-1-HP001-1-1.x86_64\n"
            "CVE-2023-1112  Important/Sec. -                                                "
            "patch-redis-6.2.5-1-HP001-1-1.x86_64\n"
            "CVE-2023-34969 Moderate/Sec.  dbus-1:1.12.20-10.oe2203.x86_64                  -\n"
            "CVE-2022-2938  Important/Sec. kernel-502:5.10.0-60.54.0.82.oe2203.x86_64       -\n"
        )
        mock_cve_fixed_stdout = (
            "Last metadata expiration check: 0:40:39 ago on Thu 06 Jul 2023 04:53:58 PM CST.\n"
            "CVE-2023-1981   Moderate/Sec.  avahi-libs-0.8-15.oe2203.x86_64\n"
            "CVE-2022-3715   Low/Sec.       bash-5.1.8-6.oe2203.x86_64\n"
        )
        mock_hotpatch_whether_apply = (
            "Last metadata expiration check: 0:42:04 ago on Thu 06 Jul 2023 04:53:58 PM CST.\n"
            "CVE-id        base-pkg/hotpatch   status\n"
            "CVE-2023-1111 redis-6.2.5-1/HP001 ACTIVED\n"
            "CVE-2023-1112 redis-6.2.5-1/HP001 NOT-APPLIED\n"
        )
        mock_execute_shell_command.side_effect = [
            (CommandExitCode.SUCCEED, mock_hot_updateinfo_stdout, ""),
            (CommandExitCode.SUCCEED, mock_cve_fixed_stdout, ""),
            (CommandExitCode.SUCCEED, mock_hotpatch_whether_apply, ""),
        ]
        expected_result = (
            SUCCESS,
            {
                "unfixed_cves": [
                    {"cve_id": "CVE-2023-1112", "support_hp": True},
                    {"cve_id": "CVE-2023-34969", "support_hp": False},
                    {"cve_id": "CVE-2022-2938", "support_hp": False},
                ],
                "fixed_cves": [
                    {"cve_id": "CVE-2023-1981", "fixed_by_hp": False},
                    {"cve_id": "CVE-2022-3715", "fixed_by_hp": False},
                    {"cve_id": "CVE-2023-1111", "fixed_by_hp": True, "hp_status": "ACTIVED"},
                ],
            },
        )
        self.assertEqual(expected_result, VulnerabilityManage._check_cve_by_dnf(''))

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_check_cve_by_dnf_should_return_empty_cve_list_when_command_execute_fail(self, mock_execute_shell_command):
        mock_execute_shell_command.return_value = CommandExitCode.FAIL, "", ""
        self.assertEqual(
            (COMMAND_EXEC_ERROR, {'fixed_cves': [], 'unfixed_cves': []}), VulnerabilityManage._check_cve_by_dnf('')
        )

    @mock.patch.object(VulnerabilityManage, "_syscare_change_status")
    @mock.patch.object(VulnerabilityManage, "_hotpatch_list_cve_with_cveid")
    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_fix_cve_by_dnf_should_return_true_when_execute_command_successfully_and_hotpatch_is_true(
        self, mock_execute_shell_command, mock_query_pkg_name, mock_change_hotpatch_status
    ):
        mock_cve_fix_res = """
        Last metadata expiration check: 1:05:28 ago on Wed 05 Jul 2023 11:34:33 AM CST.
        Dependencies resolved.
        ================================================================================
        Package Arch Version Repository Size
        ================================================================================
        Installing:
        patch-redis-6.2.5-1-HP002 x86_64 1-1 local_hotpatch_new 163 k

        Transaction Summary
        ================================================================================
        Install 1 Package

        Total size: 163 k
        Installed size: 822 k
        Downloading Packages:
        Running transaction check
        Transaction check succeeded.
        Running transaction test
        Transaction test succeeded.
        Running transaction
        Preparing : 1/1
        Installing : patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1
        Running scriptlet: patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1
        Verifying : patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1

        Installed:
        patch-redis-6.2.5-1-HP002-1-1.x86_64

        Complete!
        Applying hot patch
        Apply hot patch succeed: redis-6.2.5-1/HP002.
        """
        mock_execute_shell_command.return_value = CommandExitCode.SUCCEED, mock_cve_fix_res, ""
        mock_query_pkg_name.return_value = "redis-6.2.5-1/HP002"
        mock_change_hotpatch_status.return_value = True
        self.assertEqual(
            (True, mock_cve_fix_res),
            VulnerabilityManage()._fix_cve_by_dnf({"cve_id": "CVE-XXXX-XXXX", "hotpatch": True}),
        )

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_fix_cve_by_dnf_should_return_true_when_execute_command_successfully_and_hotpatch_is_false(
        self, mock_execute_shell_command
    ):
        mock_cve_fix_res = """
        Last metadata expiration check: 2:40:52 ago on Thu 06 Jul 2023 08:07:20 AM CST.
        Dependencies resolved.
        ================================================================================
        Package Architecture Version Repository Size
        ================================================================================
        Upgrading:
        apr aarch64 1.7.0-6.oe2203 aops-update 104 k

        Transaction Summary
        ================================================================================
        Upgrade 1 Package

        Total download size: 104 k
        Downloading Packages:
        apr-1.7.0-6.oe2203.aarch64.rpm 402 kB/s | 104 kB 00:00
        --------------------------------------------------------------------------------
        Total 399 kB/s | 104 kB 00:00
        Running transaction check
        Transaction check succeeded.
        Running transaction test
        Transaction test succeeded.
        Running transaction
        Preparing : 1/1
        Running scriptlet: apr-1.7.0-6.oe2203.aarch64 1/2
        Upgrading : apr-1.7.0-6.oe2203.aarch64 1/2
        Running scriptlet: apr-1.7.0-6.oe2203.aarch64 1/2
        Running scriptlet: apr-1.7.0-4.oe2203.aarch64 2/2
        Cleanup : apr-1.7.0-4.oe2203.aarch64 2/2
        Running scriptlet: apr-1.7.0-4.oe2203.aarch64 2/2
        Verifying : apr-1.7.0-6.oe2203.aarch64 1/2
        Verifying : apr-1.7.0-4.oe2203.aarch64 2/2

        Upgraded:
        apr-1.7.0-6.oe2203.aarch64

        Complete!
        """
        mock_execute_shell_command.return_value = CommandExitCode.SUCCEED, mock_cve_fix_res, ""
        self.assertEqual(
            (True, mock_cve_fix_res),
            VulnerabilityManage()._fix_cve_by_dnf({"cve_id": "CVE-XXXX-XXXX", "hotpatch": False}),
        )

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_fix_cve_by_dnf_should_return_false_when_execute_command_error_and_hotpatch_is_true(
        self, mock_execute_shell_command
    ):
        mock_execute_shell_command.return_value = CommandExitCode.FAIL, "", ""
        self.assertEqual((False, ""), VulnerabilityManage()._fix_cve_by_dnf({"cve_id": "", "hotpatch": True}))

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_fix_cve_by_dnf_should_return_false_when_execute_command_error_and_hotpatch_is_false(
        self, mock_execute_shell_command
    ):
        mock_execute_shell_command.return_value = CommandExitCode.FAIL, "", ""
        self.assertEqual((False, ""), VulnerabilityManage()._fix_cve_by_dnf({"cve_id": "", "hotpatch": False}))

    @mock.patch.object(VulnerabilityManage, "_hotpatch_list_cve_with_cveid")
    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_fix_cve_by_dnf_should_return_false_when_query_hotpatch_package_name_failed(
        self, mock_execute_shell_command, mock_query_pkg_name
    ):
        mock_cve_fix_res = """
        Last metadata expiration check: 1:05:28 ago on Wed 05 Jul 2023 11:34:33 AM CST.
        Dependencies resolved.
        ================================================================================
        Package Arch Version Repository Size
        ================================================================================
        Installing:
        patch-redis-6.2.5-1-HP002 x86_64 1-1 local_hotpatch_new 163 k

        Transaction Summary
        ================================================================================
        Install 1 Package

        Total size: 163 k
        Installed size: 822 k
        Downloading Packages:
        Running transaction check
        Transaction check succeeded.
        Running transaction test
        Transaction test succeeded.
        Running transaction
        Preparing : 1/1
        Installing : patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1
        Running scriptlet: patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1
        Verifying : patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1

        Installed:
        patch-redis-6.2.5-1-HP002-1-1.x86_64

        Complete!
        Applying hot patch
        Apply hot patch succeed: redis-6.2.5-1/HP002.
        """
        mock_execute_shell_command.return_value = CommandExitCode.SUCCEED, mock_cve_fix_res, ""
        mock_query_pkg_name.return_value = ""
        self.assertEqual(
            (False, mock_cve_fix_res), VulnerabilityManage()._fix_cve_by_dnf({"cve_id": "", "hotpatch": True})
        )

    @mock.patch.object(VulnerabilityManage, "_syscare_change_status")
    @mock.patch.object(VulnerabilityManage, "_hotpatch_list_cve_with_cveid")
    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_fix_cve_by_dnf_should_return_false_when_query_change_hotpatch_status_failed(
        self, mock_execute_shell_command, mock_query_pkg_name, mock_change_hotpatch_status
    ):
        mock_cve_fix_res = """
        Last metadata expiration check: 1:05:28 ago on Wed 05 Jul 2023 11:34:33 AM CST.
        Dependencies resolved.
        ================================================================================
        Package Arch Version Repository Size
        ================================================================================
        Installing:
        patch-redis-6.2.5-1-HP002 x86_64 1-1 local_hotpatch_new 163 k

        Transaction Summary
        ================================================================================
        Install 1 Package

        Total size: 163 k
        Installed size: 822 k
        Downloading Packages:
        Running transaction check
        Transaction check succeeded.
        Running transaction test
        Transaction test succeeded.
        Running transaction
        Preparing : 1/1
        Installing : patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1
        Running scriptlet: patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1
        Verifying : patch-redis-6.2.5-1-HP002-1-1.x86_64 1/1

        Installed:
        patch-redis-6.2.5-1-HP002-1-1.x86_64

        Complete!
        Applying hot patch
        Apply hot patch succeed: redis-6.2.5-1/HP002.
        """
        mock_execute_shell_command.return_value = CommandExitCode.SUCCEED, mock_cve_fix_res, ""
        mock_query_pkg_name.return_value = "redis-6.2.5-1/HP002"
        mock_change_hotpatch_status.return_value = False
        self.assertEqual(
            (False, mock_cve_fix_res),
            VulnerabilityManage()._fix_cve_by_dnf({"cve_id": "", "hotpatch": True, "accepted": True}),
        )

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_hotpatch_list_cve_with_cveid_should_return_package_name_when_execute_shell_succeed(
        self, mock_execute_shell_command
    ):
        mock_execte_shell_res = (
            'Last metadata expiration check: 0:54:46 ago on 2023年03月16日 星期四 09时40分27秒.\n'
            'CVE-id         base-pkg/hotpatch   status\n'
            'CVE-2023-2222  redis-6.2.5-1/HP002 ACTIVED\n'
        )
        mock_execute_shell_command.return_value = CommandExitCode.SUCCEED, mock_execte_shell_res, ""
        self.assertEqual("redis-6.2.5-1/HP002", VulnerabilityManage._hotpatch_list_cve_with_cveid("CVE-2023-2222 "))

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_hotpatch_list_cve_with_cveid_should_return_null_when_execute_shell_failed(
        self, mock_execute_shell_command
    ):
        mock_execute_shell_command.return_value = CommandExitCode.FAIL, "", ""
        self.assertEqual(None, VulnerabilityManage._hotpatch_list_cve_with_cveid("CVE-2023-2222 "))

    @mock.patch('ceres.manages.vulnerability_manage.execute_shell_command')
    def test_hotpatch_list_cve_with_cveid_should_return_null_when_execute_shell_succeed_but_cannot_get_target_cve_info(
        self, mock_execute_shell_command
    ):
        mock_execte_shell_res = (
            'Last metadata expiration check: 0:54:46 ago on 2023年03月16日 星期四 09时40分27秒.\n'
            'CVE-id         base-pkg/hotpatch   status\n'
        )
        mock_execute_shell_command.return_value = CommandExitCode.SUCCEED, mock_execte_shell_res, ""
        self.assertEqual(None, VulnerabilityManage._hotpatch_list_cve_with_cveid("CVE-2023-1111 "))
